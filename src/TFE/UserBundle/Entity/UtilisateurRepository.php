<?php

namespace TFE\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * UtilisateurRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UtilisateurRepository extends EntityRepository
{
    public function getListActif($page=1, $maxparpage=10)
    {
        $qb = $this
            ->createQueryBuilder('u')
            ->where('u.inscriptionValide = true')
            ->orderBy('u.username')
            ->setFirstResult(($page-1) * $maxparpage)
            ->setMaxResults($maxparpage);

        return new Paginator($qb);
    }

    public function getListInactif($page=1, $maxparpage=10)
    {
        $qb = $this
            ->createQueryBuilder('u')
            ->where('u.inscriptionValide = false')
            ->orderBy('u.dateInscription', 'DESC')
        ;

        $qb->setFirstResult(($page-1) * $maxparpage)
            ->setMaxResults($maxparpage);

        return new Paginator($qb);
    }

    public function countAll()
    {
        return $this->createQueryBuilder('u')
            ->select('COUNT(u)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function countActif()
    {
        return $this->createQueryBuilder('u')
            ->select('COUNT(u)')
            ->where('u.inscriptionValide = true')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function countInactif()
    {
        return $this->createQueryBuilder('u')
            ->select('COUNT(u)')
            ->where('u.inscriptionValide = false')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function countMois()
    {
        /* ***** Méthode avec substring *****
        return $this->createQueryBuilder('u')
            ->select('COUNT(u)')
            ->andwhere('SUBSTRING(u.dateInscription, 6, 2) = :mois')
            ->setParameter('mois', date_format(new \DateTime(), 'm'))
            ->andWhere('SUBSTRING(u.dateInscription, 1, 4) = :annee')
            ->setParameter('annee', date_format(new \DateTime(), 'Y'))
            ->getQuery()
            ->getSingleScalarResult();
        */
        /* ***** Méthode ci-dessus simplifiée *****
        return $this->createQueryBuilder('u')
            ->select('COUNT(u)')
            ->where('SUBSTRING(u.dateInscription, 1, 7) = :moisCourant')
            ->setParameter('moisCourant', date_format(new \DateTime(), 'Y-m'))
            ->getQuery()
            ->getSingleScalarResult();
        */

        // Méthode en utilisant le between dans une méthode séparée
        $qb = $this->createQueryBuilder('u')
            ->select('count(u)');

        $this->moisCourant($qb, 'u.dateInscription');

        return $qb->getQuery()
            ->getSingleScalarResult();

    }

    public function confirmEmail($username, $codeActivation)
    {
        return $this->createQueryBuilder('u')
            ->where('u.username = :username')
            ->setParameter('username', $username)
            ->andWhere('u.codeActivation = :codeActivation')
            ->setParameter('codeActivation', $codeActivation)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function moisCourant(QueryBuilder $qb, $date)
    {
        $qb
            ->andWhere($date . ' BETWEEN :start AND :end')
            ->setParameter('start', new \Datetime(date('Y-m').'-01'))
            ->setParameter('end',   new \Datetime(date('Y-m').'-31'))
        ;
    }
}
